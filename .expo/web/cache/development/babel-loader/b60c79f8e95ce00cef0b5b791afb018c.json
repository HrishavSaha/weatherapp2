{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { RFValue } from 'react-native-responsive-fontsize';\nimport firebase from 'firebase/app';\nimport AppLoading from 'expo-app-loading';\nimport * as Font from 'expo-font';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar customFonts = {\n  Papernotes: require(\"../assets/fonts/Papernotes-Sketch.ttf\")\n};\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"_loadFontsAsync\",\n    value: function _loadFontsAsync() {\n      return _regeneratorRuntime.async(function _loadFontsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(customFonts));\n\n            case 2:\n              this.setState({\n                fontsLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._loadFontsAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.fontsLoaded) {\n        return _jsx(AppLoading, {});\n      } else {\n        return _jsxs(View, {\n          style: styles.container,\n          children: [_jsx(SafeAreaView, {\n            style: styles.droidSafeArea\n          }), _jsx(View, {\n            style: styles.cloudContainer,\n            children: _jsx(Image, {\n              source: require(\"../assets/aesthetic.png\"),\n              style: styles.cloudImage\n            })\n          }), _jsxs(View, {\n            style: styles.appTitle,\n            children: [_jsx(Image, {\n              source: require(\"../assets/icon.png\"),\n              style: styles.appIcon\n            }), _jsx(Text, {\n              style: styles.appTitleText,\n              children: \"Weather App\"\n            })]\n          }), _jsxs(View, {\n            style: styles.buttonContainer,\n            children: [_jsx(TextInput, {\n              style: styles.input,\n              onChangeText: function onChangeText(username) {\n                return _this2.setState({\n                  username: username\n                });\n              },\n              placeholder: '   Username',\n              placeholderTextColor: 'black'\n            }), _jsx(TextInput, {\n              style: styles.input,\n              onChangeText: function onChangeText(password) {\n                return _this2.setState({\n                  password: password\n                });\n              },\n              placeholder: '   Password',\n              placeholderTextColor: 'black'\n            }), _jsx(TouchableOpacity, {\n              style: styles.button,\n              onPress: function onPress() {\n                return _this2.signInWithGoogleAsync();\n              },\n              children: _jsx(Text, {\n                style: styles.googleText,\n                children: \"Sign in\"\n              })\n            })]\n          })]\n        });\n      }\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#15193c'\n  },\n  droidSafeArea: {\n    marginTop: Platform.OS === 'android' ? StatusBar.currentHeight : RFValue(35)\n  },\n  appTitle: {\n    flex: 0.2,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  appIcon: {\n    width: RFValue(60),\n    height: RFValue(60),\n    resizeMode: 'contain'\n  },\n  appTitleText: {\n    color: 'white',\n    textAlign: 'center',\n    fontSize: RFValue(35),\n    fontFamily: 'Papernotes'\n  },\n  buttonContainer: {\n    flex: 0.3,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    width: RFValue(250),\n    height: RFValue(50),\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    borderRadius: RFValue(30),\n    backgroundColor: 'white'\n  },\n  input: {\n    width: RFValue(250),\n    height: RFValue(50),\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    borderRadius: RFValue(30),\n    backgroundColor: 'white',\n    marginBottom: 5,\n    flex: 0.3\n  },\n  googleText: {\n    color: 'black',\n    fontSize: RFValue(20),\n    fontFamily: 'Papernotes'\n  },\n  cloudContainer: {\n    flex: 0.3\n  },\n  cloudImage: {\n    position: 'absolute',\n    width: '100%',\n    resizeMode: 'contain',\n    bottom: RFValue(-70)\n  }\n});","map":{"version":3,"sources":["D:/Coding/Weather App 2/weatherapp2/screens/login.js"],"names":["React","Component","TouchableOpacity","RFValue","firebase","AppLoading","Font","customFonts","Papernotes","require","LoginScreen","props","state","fontsLoaded","loadAsync","setState","_loadFontsAsync","styles","container","droidSafeArea","cloudContainer","cloudImage","appTitle","appIcon","appTitleText","buttonContainer","input","username","password","button","signInWithGoogleAsync","googleText","StyleSheet","create","flex","backgroundColor","marginTop","Platform","OS","StatusBar","currentHeight","justifyContent","alignItems","flexDirection","width","height","resizeMode","color","textAlign","fontSize","fontFamily","borderRadius","marginBottom","position","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  SafeAreaView,\r\n  Platform,\r\n  StatusBar,\r\n  Image,\r\n  Dimensions,\r\n  TextInput,\r\n} from 'react-native';\r\nimport { TouchableOpacity } from 'react-native-gesture-handler';\r\nimport { RFValue } from 'react-native-responsive-fontsize';\r\nimport firebase from 'firebase/app';\r\n\r\nimport AppLoading from 'expo-app-loading';\r\nimport * as Font from 'expo-font';\r\n\r\nlet customFonts = {\r\n  Papernotes: require('../assets/fonts/Papernotes-Sketch.ttf'),\r\n};\r\n\r\nexport default class LoginScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fontsLoaded: false,\r\n    };\r\n  }\r\n\r\n  async _loadFontsAsync() {\r\n    await Font.loadAsync(customFonts);\r\n    this.setState({ fontsLoaded: true });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._loadFontsAsync();\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.fontsLoaded) {\r\n      return <AppLoading />;\r\n    } else {\r\n      return (\r\n        <View style={styles.container}>\r\n          <SafeAreaView style={styles.droidSafeArea} />\r\n\r\n          <View style={styles.cloudContainer}>\r\n            <Image\r\n              source={require('../assets/aesthetic.png')}\r\n              style={styles.cloudImage}></Image>\r\n          </View>\r\n          <View style={styles.appTitle}>\r\n            <Image\r\n              source={require('../assets/icon.png')}\r\n              style={styles.appIcon}></Image>\r\n            <Text style={styles.appTitleText}>Weather App</Text>\r\n          </View>\r\n          <View style={styles.buttonContainer}>\r\n            <TextInput\r\n              style={styles.input}\r\n              onChangeText={(username) => this.setState({ username })}\r\n              placeholder={'   Username'}\r\n              placeholderTextColor={'black'}\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              onChangeText={(password) => this.setState({ password })}\r\n              placeholder={'   Password'}\r\n              placeholderTextColor={'black'}\r\n            />\r\n            <TouchableOpacity\r\n              style={styles.button}\r\n              onPress={() => this.signInWithGoogleAsync()}>\r\n              <Text style={styles.googleText}>Sign in</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#15193c',\r\n  },\r\n  droidSafeArea: {\r\n    marginTop:\r\n      Platform.OS === 'android' ? StatusBar.currentHeight : RFValue(35),\r\n  },\r\n  appTitle: {\r\n    flex: 0.2,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n  },\r\n  appIcon: {\r\n    width: RFValue(60),\r\n    height: RFValue(60),\r\n    resizeMode: 'contain',\r\n  },\r\n  appTitleText: {\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    fontSize: RFValue(35),\r\n    fontFamily: 'Papernotes',\r\n  },\r\n  buttonContainer: {\r\n    flex: 0.3,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  button: {\r\n    width: RFValue(250),\r\n    height: RFValue(50),\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n    borderRadius: RFValue(30),\r\n    backgroundColor: 'white',\r\n  },\r\n  input: {\r\n    width: RFValue(250),\r\n    height: RFValue(50),\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n    borderRadius: RFValue(30),\r\n    backgroundColor: 'white',\r\n    marginBottom:5,\r\n    flex:0.3\r\n  },\r\n  googleText: {\r\n    color: 'black',\r\n    fontSize: RFValue(20),\r\n    fontFamily: 'Papernotes',\r\n  },\r\n  cloudContainer: {\r\n    flex: 0.3,\r\n  },\r\n  cloudImage: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    resizeMode: 'contain',\r\n    bottom: RFValue(-70),\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}